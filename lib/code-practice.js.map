{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap af8e9125a84bd719b310","webpack:///./src/index.js","webpack:///./src/lib/graph.js","webpack:///./src/lib/graph-sort.js"],"names":["home","addEdge","vertexList","showGraph","depthFirstSearch","Graph","v","vertices","edges","adjacencies","marked","edgeTo","i","prototype","addVertex","data","undefined","console","log","length","w","from","to","push","str","j","breadthFirstSearch","source","queue","shift","GraphSort","topSort","stack","visited","topSortHelper","adjvertex","pathTo","hasPathTo","shortestpath","showPath","paths","num","pop"],"mappings":"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","file":"code-practice.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"code-practice\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"code-practice\"] = factory();\n\telse\n\t\troot[\"code-practice\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap af8e9125a84bd719b310\n **/","import Graph from 'lib/graph.js';\n// var home = new Graph(12); //number passed here is number of vertices in this graph\n// //Neo4J - db for graphs, connections,\n\n// //create all the connection edges\n// //Question: do I need to create the connections in both directions?\n// //Answer: You do need at least every city represented as the first parameter\n// home.addEdge(0,1); //Seattle to Shoreline\n// home.addEdge(0,2); //Seattle to SoDo\n// home.addEdge(1,4); //Shoreline to Bothell\n// home.addEdge(2,3); //SoDo to Renton\n// home.addEdge(3,2); //Renton to SoDo\n// home.addEdge(3,10); //Renton to Olympia\n// home.addEdge(4,6); //Bothell to Lynnwood\n// home.addEdge(4,5); //Bothell to Kirkland\n// home.addEdge(5,4); //Kirkland to Bothell\n// home.addEdge(5,7); //Kirkland to Bellevue\n// home.addEdge(5,11); //Kirkland to Redmond\n// home.addEdge(6,4); //Lynwood to Bothell\n// home.addEdge(6,8); //Lynnwood to Everett\n// home.addEdge(7,3); //Bellevue to Renton\n// home.addEdge(7,9); //Bellevue to Issaquah\n// home.addEdge(8,6); //Everett to Lynnwood\n// home.addEdge(9,7); //Issaquah to Bellevue\n// home.addEdge(10,3); //Olympia to Renton\n// home.addEdge(11,5); //Redmond to Kirkland\n// home.vertexList = [\"Seattle\",\"Shoreline\",\"SoDo\", //0 1 2\n//                     \"Renton\",\"Bothell\",\"Kirkland\", //3 4 5\n//                     \"Lynnwood\",\"Bellevue\",\"Everett\", //6 7 8\n//                     \"Issaquah\",\"Olympia\",\"Redmond\"]; //9 10 11\n\n\nvar home = new Graph(5);\nhome.addEdge(0,1); \nhome.addEdge(0,2); \nhome.addEdge(1,3); \nhome.addEdge(2,4);\nhome.vertexList = [\"Seattle\",\"Shoreline\",\"SoDo\", //0 1 2\n                    \"Renton\",\"Bothell\"]; //9 10 11\n\nhome.showGraph();\nhome.depthFirstSearch(0);\n\n\n// home.showGraph();\n\n// home.topSort();\n// home.depthFirstSearch(0); //start in seattle\n// home.breadthFirstSearch(0); //start in seattle\n\n// var vertex = 8; //everett is destination\n// var source = 0;\n// var paths = home.pathTo(source, vertex);\n// home.showPath(paths); //expected outcome:0 1 4 6 8 (Seattle, Shoreline, Bothell, Lynnwood, Everett)\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","import AddGraphSort from './graph-sort.js';\n\nexport default function Graph(v) {\n  this.vertices = v;\n  this.edges = 0;\n  this.adjacencies = [];\n\n  this.marked = [];\n  this.edgeTo = [];\n  this.vertexList = [];\n\n  //Fixme: don't need to make this for loop at the start of creating a graph\n  for (var i = 0; i < this.vertices; ++i) { //for every vertex\n    this.adjacencies[i] = []; //push empty array to vertex location in adjacencies array\n  }\n};\n\nGraph.prototype.addVertex = function(data) {}//this.vertices.push({data: data, visited: false});};\n\nGraph.prototype.depthFirstSearch = function(v) { //pass in a vertex number\n  this.marked[v] = true; //mark its index in the marked array true\n  if (this.adjacencies[v] !== undefined ) { //if this vertex number exists in adjacencies\n    console.log('Visited vertex: ' + this.vertexList[v], v); //console log that it was visited\n  }\n  for (var i = 0; i < this.adjacencies[v].length; i++) {\n    var w = this.adjacencies[v][i];\n    if (!this.marked[w]) {\n      this.depthFirstSearch(w);\n    }\n  }\n};\n\nGraph.prototype.addEdge = function(from,to) { //8,3 example data\n  this.adjacencies[from].push(to); //puts 3 into index 8\n  this.adjacencies[to].push(from);\n  this.edges++;\n};\n\n//Prints the long list of city name connections with arrows -->\n// Graph.prototype.showGraph = function() {\n//   var visited = [];\n//   var str;\n//   for (var i = 0; i < this.vertices; ++i) {\n//     // str += this.vertexList[i] + \" -> \"; //shows how each node connects to another\n//     str = '';\n//     str += i + \" -> \"; //shows how each node connects to another\n//     visited.push(i);\n    \n//     for (var j = 0; j < this.vertices; ++j) {\n//       if (this.adjacencies[i][j] != undefined) {\n//         // if (visited.indexOf(this.vertexList[j]) < 0) {\n//           // str += this.vertexList[j] + ' ';\n//         str += j + ' ';\n//         // }\n//       }\n//     }\n//     console.log(str);\n//     // visited.pop();\n//   }\n// };\n\nGraph.prototype.showGraph = function () {\n  var str;\n  for (var i = 0; i < this.vertices; ++i) {\n    str = '';\n    str += i + \" -> \";\n    for (var j = 0; j < this.vertices; ++j) {\n      if (this.adjacencies[i][j] != undefined) {\n        // putstr(this.adj[i][j] + ' ');\n        str += this.adjacencies[i][j] + ' ';\n      }\n    }\n\n    console.log(str)\n  }\n}\n\n\nGraph.prototype.breadthFirstSearch = function(source) {\n  var queue = [];\n  queue.push(source);\n\n  this.marked[source] = true;\n  while (queue.length > 0) {\n    var v = queue.shift();\n\n    if (v !== undefined) {\n      // console.log('Visited vertex: ' + v);\n      console.log('Visited vertex: ' + this.vertexList[v], v);\n    }\n\n    for (var i = 0; i < this.adjacencies[v].length; i++) {\n      var w = this.adjacencies[v][i];\n      if (!this.marked[w]) {\n        this.edgeTo[w] = v;\n        this.marked[w] = true;\n        queue.push(w);\n      }\n    }\n  }\n};\n\nAddGraphSort(Graph);\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/lib/graph.js\n **/","export default function GraphSort (Graph) {\n  /*\n  Top sort is like depth-first except it doesn't print the vertex as it visits them\n  Instead, the algorithm visits the adjacent vertices first and then pushes the current\n  vertex onto a stack.\n  */\n\n  Graph.prototype.topSort = function() { //topological sort\n    var stack = []; //this stack array will hold vertices?\n    var visited = []; //create an array for visited vertices\n\n    //first set all vertices to not visited (resetting things)\n    for (var i = 0; i < this.vertices; i++) {\n      visited[i] = false;\n    }\n\n    //now go through again, this time using topSortHelper on any unvisited vertices encountered\n    for (var i = 0; i < this.vertices; i++) {\n      if (visited[i] == false) {\n        this.topSortHelper(i, visited, stack);\n      }\n    }\n\n    //vertices are in a stack now and we'll use that stack to console.log each of them\n    for (var i = 0; i < stack.length; i++) {\n      console.log(\"City \" + i + \": \" + this.vertexList[stack[i]]);\n    }\n  };\n\n  Graph.prototype.topSortHelper = function(v, visited, stack) {\n    //mark this vertice as visited, visit the adjacent ones\n    visited[v] = true;\n    for (var i = 0; i < this.adjacencies[v]; i ++) {\n      var adjvertex = this.adjacencies[v][i]; //offby1 this was the missing line\n\n      if (!visited[adjvertex]) {\n        //re-run function on adjacent vertices to this one\n        this.topSortHelper(visited[adjvertex], visited, stack); //this is where 0 gets set to false\n      }\n    }\n    stack.push(v); //push this vertex to the stack\n  };\n\n  Graph.prototype.pathTo = function(source, v) { //source and vertex come in from program file\n    if (!this.hasPathTo(v)) { //if there's no path to the vertex, return undefined\n      return undefined;\n    }\n    var shortestpath = []; //make an empty path array\n    for (var i = v; i != source; i = this.edgeTo[i]) { //set i = to v, and push every path to the array\n      shortestpath.push(i);\n    }\n    shortestpath.push(source); //push in the source (\"0\" in this test) last\n    return shortestpath; //return the path array to the main file\n  };\n\n  Graph.prototype.hasPathTo = function(v) {\n    return this.marked[v];\n  };\n\n  Graph.prototype.showPath = function(paths) {\n    var str = '';\n    var num = 0;\n    while (paths.length > 0) {\n      if (paths.length > 1) {\n        num = paths.pop();\n        str += num + \" \" + this.vertexList[num] + '--> '; //builds the string that gets displayed in console\n      }\n      else {\n        num = paths.pop();\n        str += num + \" \" + this.vertexList[num];\n      }\n    }\n    console.log(\"Shortest path: \" + str);\n  };\n\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/lib/graph-sort.js\n **/"],"sourceRoot":""}