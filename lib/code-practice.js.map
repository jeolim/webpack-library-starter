{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 124509c8b72da0412846","webpack:///./src/index.js","webpack:///./src/lib/graph.js","webpack:///./src/lib/graph-sort.js","webpack:///./src/lib/bst.js","webpack:///./src/runGraph.js","webpack:///./src/runBST.js"],"names":["Graph","v","vertices","edges","adjacencies","marked","edgeTo","vertexList","i","prototype","addVertex","data","depthFirstSearch","undefined","console","log","length","w","addEdge","from","to","push","showGraph","str","j","breadthFirstSearch","source","queue","shift","GraphSort","topSort","stack","visited","topSortHelper","adjvertex","pathTo","hasPathTo","shortestpath","showPath","paths","num","pop","BST","root","_Node","left","right","count","show","showCount","find","current","insert","n","parent","inOrder","node","preOrder","postOrder","remove","removeNode","update","occurrences","countNodes","countEdges","max","currNode","min","runScript","home","vertex","nums"],"mappings":"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","file":"code-practice.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"code-practice\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"code-practice\"] = factory();\n\telse\n\t\troot[\"code-practice\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 124509c8b72da0412846\n **/","import runGraph from './runGraph.js';\nimport runBST from 'runBST.js';\n\nrunBST();\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","import AddGraphSort from './graph-sort.js';\n\nexport default function Graph(v) {\n  this.vertices = v;\n  this.edges = 0;\n  this.adjacencies = [];\n\n  this.marked = [];\n  this.edgeTo = [];\n  this.vertexList = [];\n\n  //Fixme: don't need to make this for loop at the start of creating a graph\n  for (var i = 0; i < this.vertices; ++i) { //for every vertex\n    this.adjacencies[i] = []; //push empty array to vertex location in adjacencies array\n  }\n};\n\nGraph.prototype.addVertex = function(data) {}//this.vertices.push({data: data, visited: false});};\n\nGraph.prototype.depthFirstSearch = function(v) { //pass in a vertex number\n  this.marked[v] = true; //mark its index in the marked array true\n  if (this.adjacencies[v] !== undefined ) { //if this vertex number exists in adjacencies\n    console.log('Visited vertex: ' + this.vertexList[v], v); //console log that it was visited\n  }\n  for (var i = 0; i < this.adjacencies[v].length; i++) {\n    var w = this.adjacencies[v][i];\n    if (!this.marked[w]) {\n      this.depthFirstSearch(w);\n    }\n  }\n};\n\nGraph.prototype.addEdge = function(from,to) { //8,3 example data\n  this.adjacencies[from].push(to); //puts 3 into index 8\n  this.adjacencies[to].push(from);\n  this.edges++;\n};\n\n//Prints the long list of city name connections with arrows -->\nGraph.prototype.showGraph = function () {\n  var str;\n  for (var i = 0; i < this.vertices; ++i) {\n    str = '';\n    str += i + \" -> \";\n    for (var j = 0; j < this.vertices; ++j) {\n      if (this.adjacencies[i][j] != undefined) {\n        str += this.adjacencies[i][j] + ' ';\n      }\n    }\n\n    console.log(str);\n  }\n}\n\n\nGraph.prototype.breadthFirstSearch = function(source) {\n  // debugger;\n  var queue = [];\n  queue.push(source);\n\n  this.marked[source] = true;\n  while (queue.length > 0) {\n    var v = queue.shift();\n\n    if (v !== undefined) {\n      // console.log('Visited vertex: ' + v);\n      console.log('Visited vertex: ' + this.vertexList[v], v);\n    }\n\n    for (var i = 0; i < this.adjacencies[v].length; i++) {\n      var w = this.adjacencies[v][i];\n      if (!this.marked[w]) {\n        this.edgeTo[w] = v;\n        this.marked[w] = true;\n        queue.push(w);\n      }\n    }\n  }\n};\n\nAddGraphSort(Graph);\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/lib/graph.js\n **/","export default function GraphSort (Graph) {\n  /*\n  Top sort is like depth-first except it doesn't print the vertex as it visits them\n  Instead, the algorithm visits the adjacent vertices first and then pushes the current\n  vertex onto a stack.\n  */\n\n  Graph.prototype.topSort = function() { //topological sort\n    var stack = []; //this stack array will hold vertices?\n    var visited = []; //create an array for visited vertices\n\n    //first set all vertices to not visited (resetting things)\n    for (var i = 0; i < this.vertices; i++) {\n      visited[i] = false;\n    }\n\n    //now go through again, this time using topSortHelper on any unvisited vertices encountered\n    for (var i = 0; i < this.vertices; i++) {\n      if (visited[i] == false) {\n        this.topSortHelper(i, visited, stack);\n      }\n    }\n\n    //vertices are in a stack now and we'll use that stack to console.log each of them\n    for (var i = 0; i < stack.length; i++) {\n      console.log(\"City \" + i + \": \" + this.vertexList[stack[i]]);\n    }\n  };\n\n  Graph.prototype.topSortHelper = function(v, visited, stack) {\n    //mark this vertice as visited, visit the adjacent ones\n    visited[v] = true;\n    for (var i = 0; i < this.adjacencies[v]; i ++) {\n      var adjvertex = this.adjacencies[v][i]; //offby1 this was the missing line\n\n      if (!visited[adjvertex]) {\n        //re-run function on adjacent vertices to this one\n        this.topSortHelper(visited[adjvertex], visited, stack); //this is where 0 gets set to false\n      }\n    }\n    stack.push(v); //push this vertex to the stack\n  };\n\n  Graph.prototype.pathTo = function(source, v) { //source and vertex come in from program file\n    // debugger;\n    if (!this.hasPathTo(v)) { //if there's no path to the vertex, return undefined\n      return undefined;\n    }\n    var shortestpath = []; //make an empty path array\n    for (var i = v; i != source; i = this.edgeTo[i]) { //set i = to v, and push every path to the array\n      shortestpath.push(i);\n    }\n    shortestpath.push(source); //push in the source (\"0\" in this test) last\n    return shortestpath; //return the path array to the main file\n  };\n\n  Graph.prototype.hasPathTo = function(v) {\n    return this.marked[v];\n  };\n\n  Graph.prototype.showPath = function(paths) {\n    var str = '';\n    var num = 0;\n    while (paths.length > 0) {\n      if (paths.length > 1) {\n        num = paths.pop();\n        str += num + \" \" + this.vertexList[num] + '--> '; //builds the string that gets displayed in console\n      }\n      else {\n        num = paths.pop();\n        str += num + \" \" + this.vertexList[num];\n      }\n    }\n    console.log(\"Shortest path: \" + str);\n  };\n\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/lib/graph-sort.js\n **/","var BST = function() {\n  this.root = null;\n\n//embed _Node inside BST so it comes with when BST is created\n  this._Node = function(data, left, right) {\n    this.data = data;\n    this.count = 1;\n    this.left = left;\n    this.right = right;\n  };\n\n  this._Node.prototype.show = function() {\n    return this.data;\n  };\n\n  this._Node.prototype.showCount = function() {\n    return this.count;\n  }\n};\n\nBST.prototype.find = function(data) {\n  var current = this.root;\n  while (current && current.data != data) {\n    if (data < current.data) {\n      current = current.left;\n    }\n    else {\n      current = current.right;\n    }\n  }\n  return current;\n};\n\nBST.prototype.insert = function(data) {\n  //use this data for a new node\n  var n = new this._Node(data, null, null);\n  //if root is null, put this new node and its data into root\n  if (this.root === null) {\n    this.root = n;\n  }\n  else {\n    //find a child position for this node\n    var current = this.root;\n    var parent;\n    while (true) {\n      parent = current;\n      if (data < current.data) {\n        current = current.left;\n        if (current === null) {\n          parent.left = n;\n          break;\n        }\n      }\n      else {\n        current = current.right;\n        if (current === null) {\n          parent.right = n;\n          break;\n        }\n      }\n    }\n  }\n};\n\nBST.prototype.inOrder = function(node) {\n  if (node !== null) {\n    this.inOrder(node.left);\n    console.log(node.show() + \": \" + node.showCount() + \" \");\n    this.inOrder(node.right);\n  }\n};\n\nBST.prototype.preOrder = function(node) {\n  if (node !== null) {\n    //console.log(node.show() + \" \");\n    this.preOrder(node.left);\n    this.preOrder(node.right);\n  }\n};\n\nBST.prototype.postOrder = function(node) { //use post order when traversing for removal\n  if (node !== null) {\n    this.postOrder(node.left);\n    this.postOrder(node.right);\n    //console.log(node.show() + \" \");\n  }\n};\n\nBST.prototype.remove = function(data) {\n  root = removeNode(this.root, data);\n};\n\nBST.prototype.removeNode = function(node, data) {\n  if (node === null) {\n    return null;\n  }\n  if (data == node.data) {\n    //node has no children\n    if (node.left === null && node.right === null) {\n      return null;\n    }\n    //node has no left child\n    if (node.left === null) {\n    }\n  }\n};\n\nBST.prototype.update = function(data) {\n  var occurrences = this.find(data);\n  occurrences.count++;\n  return occurrences;\n};\n\n/*\nBST.prototype.printNodes = function(arr) {\n  var str = '';\n  this.inOrder\n  for (var i = 0; i < arr.length; i++) {\n    str += arr[i].toString() + ': ' + arr[i].count + '\\n';\n  }\n  return str;\n};\n*/\n\n/*\n1.  Add a function to the BST class that counts the number of nodes in a BST.\n*/\n\nBST.prototype.countNodes = function(node) {\n  if (!node) { //formerly if (node === null). Doing !node catches \"undefined\" as well.\n    return null;\n  }\n  //if the node has no children, return 1\n  if (!node.left && !node.right) {\n    return 1;\n  } else {\n    //otherwise, re-run this function with the node's left and right children\n    return 1 + this.countNodes(node.left) + this.countNodes(node.right);\n  }\n};\n\n/*\n2. Add a function to the BST class that counts the number of edges in a BST.\nTraverse the tree in order, answer is one less than the number of nodes\n*/\n\nBST.prototype.countEdges = function(node) {\n  return this.countNodes(node) -1;\n};\n\n/*\n3. Add a max() function to the BST class that finds the maximum value in a BST.\n*/\n//Since the larger value is always to the right, just traverse to the end.\n\nBST.prototype.max = function(node) {\n  var currNode = this.root; //set the max to zero to start, on the assumption all nodes are positive nums\n  while (currNode.right !== null) {\n    currNode = currNode.right;\n  }\n  return currNode.data;\n};\n\n/*\n4. Add a min() function to the BST class that finds the minimum value in a BST.\n*/\n\n//since the smaller value is always to the left, we only have to traverse left\nBST.prototype.min = function() {\n  var currNode = this.root;\n  while (currNode.left !== null) {\n    currNode = currNode.left;\n  }\n  return currNode.data;\n};\n\nexport { BST };\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/lib/bst.js\n **/","import Graph from 'lib/graph.js';\n\n// var home = new Graph(12); //number passed here is number of vertices in this graph\n// //Neo4J - db for graphs, connections,\n\n// //create all the connection edges\n// //Question: do I need to create the connections in both directions?\n// //Answer: You do need at least every city represented as the first parameter\n// home.addEdge(0,1); //Seattle to Shoreline\n// home.addEdge(0,2); //Seattle to SoDo\n// home.addEdge(1,4); //Shoreline to Bothell\n// home.addEdge(2,3); //SoDo to Renton\n// home.addEdge(3,2); //Renton to SoDo\n// home.addEdge(3,10); //Renton to Olympia\n// home.addEdge(4,6); //Bothell to Lynnwood\n// home.addEdge(4,5); //Bothell to Kirkland\n// home.addEdge(5,4); //Kirkland to Bothell\n// home.addEdge(5,7); //Kirkland to Bellevue\n// home.addEdge(5,11); //Kirkland to Redmond\n// home.addEdge(6,4); //Lynwood to Bothell\n// home.addEdge(6,8); //Lynnwood to Everett\n// home.addEdge(7,3); //Bellevue to Renton\n// home.addEdge(7,9); //Bellevue to Issaquah\n// home.addEdge(8,6); //Everett to Lynnwood\n// home.addEdge(9,7); //Issaquah to Bellevue\n// home.addEdge(10,3); //Olympia to Renton\n// home.addEdge(11,5); //Redmond to Kirkland\n// home.vertexList = [\"Seattle\",\"Shoreline\",\"SoDo\", //0 1 2\n//                     \"Renton\",\"Bothell\",\"Kirkland\", //3 4 5\n//                     \"Lynnwood\",\"Bellevue\",\"Everett\", //6 7 8\n//                     \"Issaquah\",\"Olympia\",\"Redmond\"]; //9 10 11\n\nexport default function runScript () {\n\tvar home = new Graph(5);\n\thome.addEdge(0,1); \n\thome.addEdge(0,2); \n\thome.addEdge(1,3); \n\thome.addEdge(2,4);\n\thome.vertexList = [\"Seattle\",\"Shoreline\",\"SoDo\", //0 1 2\n\t                    \"Renton\",\"Bothell\"]; //9 10 11\n\n\t// home.showGraph();\n\thome.breadthFirstSearch(0);\n\n\n\t// home.showGraph();\n\n\t// home.topSort();\n\t// home.depthFirstSearch(0); //start in seattle\n\t// home.breadthFirstSearch(0); //start in seattle\n\n\tvar vertex = 4; //everett is destination\n\tvar source = 0;\n\tvar paths = home.pathTo(source, vertex);\n\tconsole.log('paths: ', paths);\n\t// home.showPath(paths); //expected outcome:0 1 4 6 8 (Seattle, Shoreline, Bothell, Lynnwood, Everett)\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/runGraph.js\n **/","import {BST} from 'lib/bst.js';\n\nexport default function () {\n\tvar nums = new BST(); \n\tnums.insert(23); \n\tnums.insert(45); \n\tnums.insert(16); \n\tnums.insert(37); \n\tnums.insert(3); \n\tnums.insert(99); \n\tnums.insert(22);  \n\tnums.inOrder(nums.root);\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/runBST.js\n **/"],"sourceRoot":""}