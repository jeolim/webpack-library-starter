{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 1e4d5aaa2b97ab90e93e","webpack:///./src/index.js","webpack:///./src/lib/graph.js","webpack:///./src/lib/graph-sort.js","webpack:///./src/runGraph.js"],"names":["Graph","v","vertices","edges","adjacencies","marked","edgeTo","vertexList","i","prototype","addVertex","data","depthFirstSearch","undefined","console","log","length","w","addEdge","from","to","push","showGraph","str","j","breadthFirstSearch","source","queue","shift","GraphSort","topSort","stack","visited","topSortHelper","adjvertex","pathTo","hasPathTo","shortestpath","showPath","paths","num","pop","home","vertex"],"mappings":"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","file":"code-practice.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"code-practice\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"code-practice\"] = factory();\n\telse\n\t\troot[\"code-practice\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1e4d5aaa2b97ab90e93e\n **/","import runGraph from 'runGraph.js';\n// import runBST from 'runBST.js';\n// import runBstOccurences from 'runBstOccurences.js';\t\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","import AddGraphSort from './graph-sort.js';\n\nexport default function Graph(v) {\n  this.vertices = v;\n  this.edges = 0;\n  this.adjacencies = [];\n\n  this.marked = [];\n  this.edgeTo = [];\n  this.vertexList = [];\n\n  //Fixme: don't need to make this for loop at the start of creating a graph\n  for (var i = 0; i < this.vertices; ++i) { //for every vertex\n    this.adjacencies[i] = []; //push empty array to vertex location in adjacencies array\n  }\n};\n\nGraph.prototype.addVertex = function(data) {}//this.vertices.push({data: data, visited: false});};\n\nGraph.prototype.depthFirstSearch = function(v) { //pass in a vertex number\n  this.marked[v] = true; //mark its index in the marked array true\n  if (this.adjacencies[v] !== undefined ) { //if this vertex number exists in adjacencies\n    console.log('Visited vertex: ' + this.vertexList[v], v); //console log that it was visited\n  }\n  for (var i = 0; i < this.adjacencies[v].length; i++) {\n    var w = this.adjacencies[v][i];\n    if (!this.marked[w]) {\n      this.depthFirstSearch(w);\n    }\n  }\n};\n\nGraph.prototype.addEdge = function(from,to) { //8,3 example data\n  this.adjacencies[from].push(to); //puts 3 into index 8\n  this.adjacencies[to].push(from);\n  this.edges++;\n};\n\n//Prints the long list of city name connections with arrows -->\nGraph.prototype.showGraph = function () {\n  var str;\n  for (var i = 0; i < this.vertices; ++i) {\n    str = '';\n    str += i + \" -> \";\n    for (var j = 0; j < this.vertices; ++j) {\n      if (this.adjacencies[i][j] != undefined) {\n        str += this.adjacencies[i][j] + ' ';\n      }\n    }\n\n    console.log(str);\n  }\n}\n\n\nGraph.prototype.breadthFirstSearch = function(source) {\n  // debugger;\n  var queue = [];\n  queue.push(source);\n\n  this.marked[source] = true;\n  while (queue.length > 0) {\n    var v = queue.shift();\n\n    if (v !== undefined) {\n      // console.log('Visited vertex: ' + v);\n      console.log('Visited vertex: ' + this.vertexList[v], v);\n    }\n\n    for (var i = 0; i < this.adjacencies[v].length; i++) {\n      var w = this.adjacencies[v][i];\n      if (!this.marked[w]) {\n        this.edgeTo[w] = v;\n        this.marked[w] = true;\n        queue.push(w);\n      }\n    }\n  }\n};\n\nAddGraphSort(Graph);\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/lib/graph.js\n **/","export default function GraphSort (Graph) {\n  /*\n  Top sort is like depth-first except it doesn't print the vertex as it visits them\n  Instead, the algorithm visits the adjacent vertices first and then pushes the current\n  vertex onto a stack.\n  */\n\n  Graph.prototype.topSort = function() { //topological sort\n    var stack = []; //this stack array will hold vertices?\n    var visited = []; //create an array for visited vertices\n\n    //first set all vertices to not visited (resetting things)\n    for (var i = 0; i < this.vertices; i++) {\n      visited[i] = false;\n    }\n\n    //now go through again, this time using topSortHelper on any unvisited vertices encountered\n    for (var i = 0; i < this.vertices; i++) {\n      if (visited[i] == false) {\n        this.topSortHelper(i, visited, stack);\n      }\n    }\n\n    //vertices are in a stack now and we'll use that stack to console.log each of them\n    for (var i = 0; i < stack.length; i++) {\n      console.log(\"City \" + i + \": \" + this.vertexList[stack[i]]);\n    }\n  };\n\n  Graph.prototype.topSortHelper = function(v, visited, stack) {\n    //mark this vertice as visited, visit the adjacent ones\n    visited[v] = true;\n    for (var i = 0; i < this.adjacencies[v]; i ++) {\n      var adjvertex = this.adjacencies[v][i]; //offby1 this was the missing line\n\n      if (!visited[adjvertex]) {\n        //re-run function on adjacent vertices to this one\n        this.topSortHelper(visited[adjvertex], visited, stack); //this is where 0 gets set to false\n      }\n    }\n    stack.push(v); //push this vertex to the stack\n  };\n\n  Graph.prototype.pathTo = function(source, v) { //source and vertex come in from program file\n    // debugger;\n    if (!this.hasPathTo(v)) { //if there's no path to the vertex, return undefined\n      return undefined;\n    }\n    var shortestpath = []; //make an empty path array\n    for (var i = v; i != source; i = this.edgeTo[i]) { //set i = to v, and push every path to the array\n      shortestpath.push(i);\n    }\n    shortestpath.push(source); //push in the source (\"0\" in this test) last\n    return shortestpath; //return the path array to the main file\n  };\n\n  Graph.prototype.hasPathTo = function(v) {\n    return this.marked[v];\n  };\n\n  Graph.prototype.showPath = function(paths) {\n    var str = '';\n    var num = 0;\n    while (paths.length > 0) {\n      if (paths.length > 1) {\n        num = paths.pop();\n        str += num + \" \" + this.vertexList[num] + '--> '; //builds the string that gets displayed in console\n      }\n      else {\n        num = paths.pop();\n        str += num + \" \" + this.vertexList[num];\n      }\n    }\n    console.log(\"Shortest path: \" + str);\n  };\n\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/lib/graph-sort.js\n **/","import Graph from 'lib/graph.js';\n\n// var home = new Graph(12); //number passed here is number of vertices in this graph\n// //Neo4J - db for graphs, connections,\n\n// //create all the connection edges\n// //Question: do I need to create the connections in both directions?\n// //Answer: You do need at least every city represented as the first parameter\n// home.addEdge(0,1); //Seattle to Shoreline\n// home.addEdge(0,2); //Seattle to SoDo\n// home.addEdge(1,4); //Shoreline to Bothell\n// home.addEdge(2,3); //SoDo to Renton\n// home.addEdge(3,2); //Renton to SoDo\n// home.addEdge(3,10); //Renton to Olympia\n// home.addEdge(4,6); //Bothell to Lynnwood\n// home.addEdge(4,5); //Bothell to Kirkland\n// home.addEdge(5,4); //Kirkland to Bothell\n// home.addEdge(5,7); //Kirkland to Bellevue\n// home.addEdge(5,11); //Kirkland to Redmond\n// home.addEdge(6,4); //Lynwood to Bothell\n// home.addEdge(6,8); //Lynnwood to Everett\n// home.addEdge(7,3); //Bellevue to Renton\n// home.addEdge(7,9); //Bellevue to Issaquah\n// home.addEdge(8,6); //Everett to Lynnwood\n// home.addEdge(9,7); //Issaquah to Bellevue\n// home.addEdge(10,3); //Olympia to Renton\n// home.addEdge(11,5); //Redmond to Kirkland\n// home.vertexList = [\"Seattle\",\"Shoreline\",\"SoDo\", //0 1 2\n//                     \"Renton\",\"Bothell\",\"Kirkland\", //3 4 5\n//                     \"Lynnwood\",\"Bellevue\",\"Everett\", //6 7 8\n//                     \"Issaquah\",\"Olympia\",\"Redmond\"]; //9 10 11\n\n\nvar home = new Graph(5);\nhome.addEdge(0,1); \nhome.addEdge(0,2); \nhome.addEdge(1,3); \nhome.addEdge(2,4);\nhome.vertexList = [\"Seattle\",\"Shoreline\",\"SoDo\", //0 1 2\n                    \"Renton\",\"Bothell\"]; //9 10 11\n\n// home.showGraph();\nhome.breadthFirstSearch(0);\n\n\n// home.showGraph();\n\n// home.topSort();\n// home.depthFirstSearch(0); //start in seattle\n// home.breadthFirstSearch(0); //start in seattle\n\nvar vertex = 4; //everett is destination\nvar source = 0;\nvar paths = home.pathTo(source, vertex);\nconsole.log('paths: ', paths);\n// home.showPath(paths); //expected outcome:0 1 4 6 8 (Seattle, Shoreline, Bothell, Lynnwood, Everett)\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/runGraph.js\n **/"],"sourceRoot":""}