{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 061d1c0ef991061adca8","webpack:///./src/index.js"],"names":["Graph","v","vertices","edges","adjacencies","marked","edgeTo","vertexList","i","prototype","addVertex","data","depthFirstSearch","undefined","console","log","length","w","addEdge","from","to","push","showGraph","visited","str","j","indexOf","pop","breadthFirstSearch","source","queue","shift","topSort","stack","topSortHelper","adjvertex","pathTo","hasPathTo","shortestpath","showPath","paths","num","home","vertex"],"mappings":"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","file":"code-practice.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"code-practice\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"code-practice\"] = factory();\n\telse\n\t\troot[\"code-practice\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 061d1c0ef991061adca8\n **/","var Graph = function(v) {\n  this.vertices = v;\n  this.edges = 0;\n  this.adjacencies = [];\n\n  this.marked = [];\n  this.edgeTo = [];\n  this.vertexList = [];\n\n//Fixme: don't need to make this for loop at the start of creating a graph\n  for (var i = 0; i < this.vertices; ++i) { //for every vertex\n    this.adjacencies[i] = []; //push empty array to vertex location in adjacencies array\n  }\n\n};\n\nGraph.prototype.addVertex = function(data) { //Tyler's addVertex function from class\n  //this.vertices.push({data: data, visited: false});\n};\n\nGraph.prototype.depthFirstSearch = function(v) { //pass in a vertex number\n  this.marked[v] = true; //mark its index in the marked array true\n  if (this.adjacencies[v] !== undefined ) { //if this vertex number exists in adjacencies\n    console.log('Visited vertex: ' + this.vertexList[v]); //console log that it was visited\n  }\n  for (var i = 0; i < this.adjacencies[v].length; i++) {\n    var w = this.adjacencies[v][i];\n    if (!this.marked[w]) {\n      this.depthFirstSearch(w);\n    }\n  }\n};\n\nGraph.prototype.addEdge = function(from,to) { //8,3 example data\n  this.adjacencies[from].push(to); //puts 3 into index 8\n  this.adjacencies[to].push(from);\n  this.edges++;\n};\n\n//Prints the long list of city name connections with arrows -->\nGraph.prototype.showGraph = function() {\n  var visited = [];\n  var str = \"\";\n  for (var i = 0; i < this.vertices; ++i) {\n    str += this.vertexList[i] + \" -> \"; //shows how each node connects to another\n    visited.push(this.vertexList[i]);\n    for (var j = 0; j < this.vertices; ++j) {\n      if (this.adjacencies[i][j] != undefined) {\n        if (visited.indexOf(this.vertexList[j]) < 0) {\n          str += this.vertexList[j] + ' ';\n        }\n      }\n    }\n    console.log(str);\n    visited.pop();\n  }\n};\n\nGraph.prototype.breadthFirstSearch = function(source) {\n  var queue = [];\n  queue.push(source);\n\n  this.marked[source] = true;\n  while (queue.length > 0) {\n    var v = queue.shift();\n\n    if (v !== undefined) {\n      console.log('Visited vertex: ' + v);\n    }\n\n    for (var i = 0; i < this.adjacencies[v].length; i++) {\n      var w = this.adjacencies[v][i];\n      if (!this.marked[w]) {\n        this.edgeTo[w] = v;\n        this.marked[w] = true;\n        queue.push(w);\n      }\n    }\n  }\n};\n\n/*\nTop sort is like depth-first except it doesn't print the vertex as it visits them\nInstead, the algorithm visits the adjacent vertices first and then pushes the current\nvertex onto a stack.\n*/\n\nGraph.prototype.topSort = function() { //topological sort\n  var stack = []; //this stack array will hold vertices?\n  var visited = []; //create an array for visited vertices\n\n  //first set all vertices to not visited (resetting things)\n  for (var i = 0; i < this.vertices; i++) {\n    visited[i] = false;\n  }\n\n  //now go through again, this time using topSortHelper on any unvisited vertices encountered\n  for (var i = 0; i < this.vertices; i++) {\n    if (visited[i] == false) {\n      this.topSortHelper(i, visited, stack);\n    }\n  }\n\n  //vertices are in a stack now and we'll use that stack to console.log each of them\n  for (var i = 0; i < stack.length; i++) {\n    console.log(\"City \" + i + \": \" + this.vertexList[stack[i]]);\n  }\n};\n\nGraph.prototype.topSortHelper = function(v, visited, stack) {\n  //mark this vertice as visited, visit the adjacent ones\n  visited[v] = true;\n  for (var i = 0; i < this.adjacencies[v]; i ++) {\n    var adjvertex = this.adjacencies[v][i]; //offby1 this was the missing line\n\n    if (!visited[adjvertex]) {\n      //re-run function on adjacent vertices to this one\n      this.topSortHelper(visited[adjvertex], visited, stack); //this is where 0 gets set to false\n    }\n  }\n  stack.push(v); //push this vertex to the stack\n};\n\nGraph.prototype.pathTo = function(source, v) { //source and vertex come in from program file\n  if (!this.hasPathTo(v)) { //if there's no path to the vertex, return undefined\n    return undefined;\n  }\n  var shortestpath = []; //make an empty path array\n  for (var i = v; i != source; i = this.edgeTo[i]) { //set i = to v, and push every path to the array\n    shortestpath.push(i);\n  }\n  shortestpath.push(source); //push in the source (\"0\" in this test) last\n  return shortestpath; //return the path array to the main file\n};\n\nGraph.prototype.hasPathTo = function(v) {\n  return this.marked[v];\n};\n\nGraph.prototype.showPath = function(paths) {\n  var str = '';\n  var num = 0;\n  while (paths.length > 0) {\n    if (paths.length > 1) {\n      num = paths.pop();\n      str += num + \" \" + this.vertexList[num] + '--> '; //builds the string that gets displayed in console\n    }\n    else {\n      num = paths.pop();\n      str += num + \" \" + this.vertexList[num];\n    }\n  }\n  console.log(\"Shortest path: \" + str);\n};\n\nvar home = new Graph(12); //number passed here is number of vertices in this graph\n\n//Neo4J - db for graphs, connections,\n\n//create all the connection edges\n//Question: do I need to create the connections in both directions?\n//Answer: You do need at least every city represented as the first parameter\nhome.addEdge(0,1); //Seattle to Shoreline\nhome.addEdge(0,2); //Seattle to SoDo\nhome.addEdge(1,4); //Shoreline to Bothell\nhome.addEdge(2,3); //SoDo to Renton\nhome.addEdge(3,2); //Renton to SoDo\nhome.addEdge(3,10); //Renton to Olympia\nhome.addEdge(4,6); //Bothell to Lynnwood\nhome.addEdge(4,5); //Bothell to Kirkland\nhome.addEdge(5,4); //Kirkland to Bothell\nhome.addEdge(5,7); //Kirkland to Bellevue\nhome.addEdge(5,11); //Kirkland to Redmond\nhome.addEdge(6,4); //Lynwood to Bothell\nhome.addEdge(6,8); //Lynnwood to Everett\nhome.addEdge(7,3); //Bellevue to Renton\nhome.addEdge(7,9); //Bellevue to Issaquah\nhome.addEdge(8,6); //Everett to Lynnwood\nhome.addEdge(9,7); //Issaquah to Bellevue\nhome.addEdge(10,3); //Olympia to Renton\nhome.addEdge(11,5); //Redmond to Kirkland\nhome.vertexList = [\"Seattle\",\"Shoreline\",\"SoDo\", //0 1 2\n                    \"Renton\",\"Bothell\",\"Kirkland\", //3 4 5\n                    \"Lynnwood\",\"Bellevue\",\"Everett\", //6 7 8\n                    \"Issaquah\",\"Olympia\",\"Redmond\"]; //9 10 11\n//home.showGraph();\nhome.topSort();\nhome.breadthFirstSearch(0); //start in seattle\nvar vertex = 8; //everett is destination\nvar source = 0;\nvar paths = home.pathTo(source, vertex);\nhome.showPath(paths); //expected outcome:0 1 4 6 8 (Seattle, Shoreline, Bothell, Lynnwood, Everett)\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/"],"sourceRoot":""}